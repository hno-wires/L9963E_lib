/*
 * "THE BEER-WARE LICENSE" (Revision 69):
 * Squadra Corse firmware team wrote this file. As long as you retain this notice
 * you can do whatever you want with this stuff. If we meet some day, and you 
 * think this stuff is worth it, you can buy us a beer in return.
 * 
 * Authors
 * - Federico Carbone [federico.carbone.sc@gmail.com]
 * - Filippo Rossi [filippo.rossi.sc@gmail.com]
 */

 // clang-format off

#include <inttypes.h>

typedef enum {
    {% for reg in registers %}{% set template = "%-"+(max_reg_strlen+12)|string+"s = %s" %}{{ template|format("L9963E_"+reg.name+"_ADDR", reg.address) }}{% if not loop.last %},
    {% endif %}{% endfor %}
} L9963E_RegistersAddrTypeDef;

{% for reg in registers %}
typedef struct {
    uint32_t    {% for field in reg.fields %}{% if field.descr != "" %}{{ field.descr }}
                {% else %}
                {% endif %}{% set template = "%-"+reg.max_field_strlen|string+"s :%s" %}{{ template|format(field.name, field.width) }},{% endfor %}
/* Padding */
                :14;
} L9963E_{{ reg.name }}TypeDef;
{% endfor %}

typedef union {
    uint32_t generic;
    {% for reg in registers %}L9963E_{{ reg.name }}TypeDef {{ "%30s"|format(reg.name) }};
    {% endfor %}
} L9963E_RegisterUnionTypeDef;

{% for reg in registers %}
#define L9963E_{{ reg.name.upper() }}_DEFAULT (((L9963E_RegisterUnionTypeDef)((L9963E_{{ reg.name }}TypeDef){ {% for field in reg.fields %}.{{ field.name }} = {{ field.default }}{% if not loop.last %}, {% endif %}{% endfor %} })).generic){% endfor %}

 // clang-format on
